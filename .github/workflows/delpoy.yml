name: deploy

on:
  push:
    branches:
      - develop

env:
  DOCKER_IMAGE: ghcr.io/ce-soup/sw-soup-server
  VERSION: ${{ github.sha }}
  DOCKER_NAME: soup
  SERVER_PORT: 8080
  EUREKA_HOST: 133.186.144.24
  EUREKA_PORT: 8761

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 1. set up node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'yarn'

      - name: 2. install dependences
        run: yarn install

      - name: 3. set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: 4. set up docker layer caches
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.version }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: 5. login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: himitery
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 6. docker build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy-sw:
    name: deploy-sw
    needs: build
    runs-on: [ self-hosted, sw-soup ]
    steps:
      - uses: actions/checkout@v2

      - name: 1. login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: himitery
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 2. docker run
        run: |
          /home/soup/commands/remove_docker_container.sh ${{ env.DOCKER_NAME }} ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p ${{ env.SERVER_PORT }}:${{ env.SERVER_PORT }} -p ${{ secrets.GRPC_PORT }}:${{ secrets.GRPC_PORT }} \
          --net soup \
          --name ${{ env.DOCKER_NAME }} \
          --restart always -e APP_PORT=${{ env.SERVER_PORT }} \
          -e NODE_ENV=production \
          -e POSTGRES_HOST=${{ secrets.DATABASE_HOST }} \
          -e POSTGRES_PORT=${{ secrets.DATABASE_PORT }} \
          -e POSTGRES_DB=${{ secrets.DATABASE_DB }} \
          -e POSTGRES_USER=${{ secrets.DATABASE_USER }} \
          -e POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
          -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
          -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
          -e GRPC_PORT=${{ secrets.GRPC_PORT }} \
          -e EUREKA_HOST=${{ env.EUREKA_HOST }} \
          -e EUREKA_PORT=${{ env.EUREKA_PORT }} \
          ${{ env.DOCKER_IMAGE }}:latest
